name: Release
run-name: Release ${{ github.ref_name }}

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write
  packages: write

# Prevent multiple releases from running simultaneously
concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false  # Don't cancel releases

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux targets
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: cg-bundler-linux-amd64
            
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: cg-bundler-linux-arm64
            
          # macOS targets
          - target: x86_64-apple-darwin
            os: macos-latest
            name: cg-bundler-macos-amd64
            
          - target: aarch64-apple-darwin
            os: macos-latest
            name: cg-bundler-macos-arm64
            
          # Windows targets
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: cg-bundler-windows-amd64.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Configure cross-compilation (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          mkdir -p .cargo
          cat >> .cargo/config.toml << EOF
          [target.aarch64-unknown-linux-gnu]
          linker = "aarch64-linux-gnu-gcc"
          EOF

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-release-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('**/Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-cargo-release-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}-
            ${{ runner.os }}-cargo-release-${{ matrix.target }}-
            ${{ runner.os }}-cargo-

      - name: Cache target directory
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-target-release-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('**/Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-target-release-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}-
            ${{ runner.os }}-target-release-${{ matrix.target }}-
            ${{ runner.os }}-target-

      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Strip binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
            # Use cross-compilation strip for ARM64
            if command -v aarch64-linux-gnu-strip >/dev/null 2>&1; then
              aarch64-linux-gnu-strip target/${{ matrix.target }}/release/cg-bundler
              echo "‚úÖ Stripped ARM64 binary"
            else
              echo "‚ö†Ô∏è  aarch64-linux-gnu-strip not found, skipping strip"
            fi
          else
            # Use regular strip for native targets
            if command -v strip >/dev/null 2>&1; then
              strip target/${{ matrix.target }}/release/cg-bundler
              echo "‚úÖ Stripped binary"
            else
              echo "‚ö†Ô∏è  strip not found, skipping"
            fi
          fi

      - name: Prepare binary for upload (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cp target/${{ matrix.target }}/release/cg-bundler ${{ matrix.name }}

      - name: Prepare binary for upload (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          copy target\${{ matrix.target }}\release\cg-bundler.exe ${{ matrix.name }}

      - name: Upload Release Asset
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          files: ./${{ matrix.name }}
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  verify-binaries:
    name: Verify Built Binaries
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Wait for assets to be available
        run: |
          echo "Waiting for release assets to be fully uploaded..."
          sleep 30

      - name: Download and verify release assets
        run: |
          echo "Downloading release assets for ${{ github.ref_name }}"
          
          # Retry logic for downloading assets
          max_attempts=5
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "Attempt $attempt to download assets..."
            if gh release download "${{ github.ref_name }}" --dir ./downloads; then
              echo "‚úÖ Successfully downloaded assets"
              break
            else
              echo "‚ùå Failed to download assets (attempt $attempt/$max_attempts)"
              if [ $attempt -eq $max_attempts ]; then
                echo "‚ùå All download attempts failed"
                exit 1
              fi
              sleep 10
              ((attempt++))
            fi
          done
          
          echo "Downloaded files:"
          ls -la ./downloads/
          
          # Verify each binary
          for file in ./downloads/*; do
            if [[ -f "$file" ]]; then
              filename=$(basename "$file")
              size=$(stat -c%s "$file")
              echo "üì¶ $filename: $size bytes"
              
              # Check if file is too small (might indicate build issue)
              if (( size < 1000000 )); then
                echo "‚ö†Ô∏è  Warning: $filename seems small ($size bytes)"
              else
                echo "‚úÖ $filename looks good"
              fi
              
              # Make executable and test (only for Linux binaries on Linux runner)
              if [[ "$filename" == *"linux-amd64"* ]]; then
                echo "Testing $filename..."
                chmod +x "$file"
                if "$file" --version 2>/dev/null; then
                  echo "‚úÖ $filename version check passed"
                else
                  echo "‚ö†Ô∏è  $filename version check failed (might be expected in CI)"
                fi
              fi
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-crate:
    name: Publish to crates.io
    needs: [build, verify-binaries]
    runs-on: ubuntu-latest
    # Only publish on actual tag pushes, not workflow_dispatch
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-publish-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('**/Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-cargo-publish-${{ hashFiles('**/Cargo.lock') }}-
            ${{ runner.os }}-cargo-publish-
            ${{ runner.os }}-cargo-

      - name: Verify package can be built
        run: cargo build --release

      - name: Run tests
        run: cargo test --release

      - name: Dry run cargo publish
        run: cargo publish --dry-run
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

      - name: Publish to crates.io
        run: cargo publish
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

      - name: Verify publication
        run: |
          echo "‚úÖ Successfully published to crates.io!"
          echo "Package should be available at: https://crates.io/crates/$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].name')"
