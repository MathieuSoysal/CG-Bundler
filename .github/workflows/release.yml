name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Get version from tag
        id: get_version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "version=dev-$(date +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          release_name: Release ${{ steps.get_version.outputs.version }}
          body: |
            ## Changes in ${{ steps.get_version.outputs.version }}
            
            ### Features
            - Rust code compression and minification
            - Support for entire `src/` directories and individual `.rs` files
            - AST-based parsing with `syn` for safe code transformation
            - Command-line interface with `clap`
            
            ### Supported Platforms
            - Linux (x86_64, ARM64)
            - macOS (x86_64, ARM64/Apple Silicon)
            - Windows (x86_64)
            
            ### Installation
            Download the appropriate binary for your platform from the assets below.
            
            **Linux/macOS:**
            ```bash
            chmod +x rust-singler-*
            sudo mv rust-singler-* /usr/local/bin/rust-singler
            ```
            
            **Windows:**
            Add the downloaded `.exe` file to your PATH.
            
          draft: false
          prerelease: false

  build:
    name: Build for ${{ matrix.target }}
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux targets
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: rust-singler-linux-amd64
            
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: rust-singler-linux-arm64
            
          # macOS targets
          - target: x86_64-apple-darwin
            os: macos-latest
            name: rust-singler-macos-amd64
            
          - target: aarch64-apple-darwin
            os: macos-latest
            name: rust-singler-macos-arm64
            
          # Windows targets
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: rust-singler-windows-amd64.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Configure cross-compilation (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          mkdir -p .cargo
          cat >> .cargo/config.toml << EOF
          [target.aarch64-unknown-linux-gnu]
          linker = "aarch64-linux-gnu-gcc"
          EOF

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.target }}-
            ${{ runner.os }}-cargo-

      - name: Cache target directory
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-target-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-target-${{ matrix.target }}-
            ${{ runner.os }}-target-

      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Strip binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          if command -v strip >/dev/null 2>&1; then
            strip target/${{ matrix.target }}/release/rust-singler
          fi

      - name: Prepare binary for upload (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cp target/${{ matrix.target }}/release/rust-singler ${{ matrix.name }}

      - name: Prepare binary for upload (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          copy target\${{ matrix.target }}\release\rust-singler.exe ${{ matrix.name }}

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.name }}
          asset_name: ${{ matrix.name }}
          asset_content_type: application/octet-stream

  verify-binaries:
    name: Verify Built Binaries
    needs: [create-release, build]
    runs-on: ubuntu-latest
    steps:
      - name: Download all release assets
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const { execSync } = require('child_process');
            
            // Get the release
            const release = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: '${{ needs.create-release.outputs.version }}'
            });
            
            console.log(`Found release with ${release.data.assets.length} assets`);
            
            for (const asset of release.data.assets) {
              console.log(`Downloading ${asset.name}...`);
              const response = await github.rest.repos.getReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                asset_id: asset.id,
                headers: {
                  Accept: 'application/octet-stream'
                }
              });
              
              fs.writeFileSync(asset.name, Buffer.from(response.data));
              
              // Check file size
              const stats = fs.statSync(asset.name);
              console.log(`${asset.name}: ${stats.size} bytes`);
              
              if (stats.size < 1000000) { // Less than 1MB might indicate an issue
                console.warn(`Warning: ${asset.name} seems small (${stats.size} bytes)`);
              }
            }

      - name: Test Linux binary
        run: |
          if [ -f "rust-singler-linux-amd64" ]; then
            chmod +x rust-singler-linux-amd64
            ./rust-singler-linux-amd64 --version || echo "Binary test failed, but continuing..."
          fi
