name: CI
run-name: CI ${{ github.event_name }} by @${{ github.actor }}

on:
  push:
    branches: [master, develop]
    paths-ignore:
      - 'docs/**'
      - '**/*.md'
  pull_request:
    branches: [master, develop]
    paths-ignore:
      - 'docs/**'
      - '**/*.md'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      clippy-available: ${{ steps.clippy-check.outputs.available }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      # Optimized caching strategy following GitHub best practices
      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('**/Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-
            ${{ runner.os }}-cargo-

      - name: Check formatting
        run: cargo fmt -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Generate clippy report for SonarCloud
        id: clippy-check
        run: |
          cargo clippy --all-targets --all-features --message-format=json > clippy.json
          echo "available=true" >> $GITHUB_OUTPUT

      - name: Upload clippy report
        if: steps.clippy-check.outputs.available == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: clippy-report
          path: clippy.json
          retention-days: 7

      - name: Run unit tests
        run: cargo test --lib --bins

      - name: Run integration tests
        run: cargo test --test '*'

      - name: Build release binary
        run: cargo build --release

      - name: Test CLI functionality
        run: |
          ./target/release/cg-bundler --version
          ./target/release/cg-bundler --help

  # Simplified cross-platform build (removed redundancy with release.yml)
  build-matrix:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('**/Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}-
            ${{ runner.os }}-cargo-build-
            ${{ runner.os }}-cargo-

      - name: Build
        run: cargo build --release

      - name: Test binary
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            ./target/release/cg-bundler.exe --version
          else
            ./target/release/cg-bundler --version
          fi

  code-coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-llvm-cov

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-coverage-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('**/Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-cargo-coverage-${{ hashFiles('**/Cargo.lock') }}-
            ${{ runner.os }}-cargo-coverage-
            ${{ runner.os }}-cargo-

      - name: Generate code coverage
        run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: lcov.info
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload coverage artifact for SonarCloud
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: lcov.info
          retention-days: 7

  sonarcloud:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: [test, code-coverage]
    permissions:
      contents: read
      pull-requests: write
    if: always() && (needs.test.result == 'success' || needs.code-coverage.result == 'success')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download clippy report
        uses: actions/download-artifact@v4
        with:
          name: clippy-report
        continue-on-error: true

      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
        continue-on-error: true

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
